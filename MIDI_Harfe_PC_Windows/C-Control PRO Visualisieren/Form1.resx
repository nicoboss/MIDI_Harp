<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="SerialPort1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>41, 22</value>
  </metadata>
  <metadata name="SaveMIDIDialog.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>253, 28</value>
  </metadata>
  <metadata name="Takt.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>270, 21</value>
  </metadata>
  <metadata name="ToolTip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>827, 26</value>
  </metadata>
  <metadata name="Aktion.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="Kombination.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <data name="ToolTip_YesNo_GroupBox.ToolTip" xml:space="preserve">
    <value>Tooltip sichd Hilfefenster wie diese, die ihnen gewisse Funktionen
durch überfahren mit dem Meuszeiger nochmahls denauer erläutern.

Tool Tips werden normahlerweize nur duch den Titel nicht aber durch
das Eingabefeld aufgeruffen um erfahrene Benutzer nicht zu verärgern.</value>
  </data>
  <data name="META_Tags_GroupBox.ToolTip" xml:space="preserve">
    <value>META Daten sind Optionale Informationen, die dem MIDI File beigefügt werden.
Diese Informationen sind in einigen Programmen und für jeden, der das MIDI File
besitzt anschau- und manipulierbar.
Die META Daten bleiben beim beenden der Programmes immer erhalten und
können daher mit einmahliger eingaben mehrmals verwendet werden.</value>
  </data>
  <data name="MIDI_SpecialMode.ToolTip" xml:space="preserve">
    <value>Es werden Ausschliesslich Noten und META Tag im MIDI File gespeichert. Die fehlende instrument und Zeitangabe führt jedoch dazu, dass das MIDI File zwingend nochmahls mit einem Musikprogramm bearbeitet werden musss!
Diese Art von MIDI File ist für normahle Player völlig nutzlos! Bitte verwenden SIe diese Funktion nur wenn sie weiisen was Sie Tuhn. Nur ca. 2% aller User werden diese je brauchen!
Durch einem Messintervall von 10ms werden mit dieser Option sehr hochwertige rohdatem MIDI Files für spezialprogramme erstellt.
</value>
  </data>
  <data name="MIDI_NormalMode.ToolTip" xml:space="preserve">
    <value>Diese Option erstellt ein ganz gewöhnliches MIDI File mit Zeitstempel, das danach von jedem beliebigen Player abgespielt werden kann.
Takt, Instrument und BPM Angaben sind bei dieser Aufnahmeart sehr zu empfehlen.</value>
  </data>
  <data name="Metronom_GroupBox.ToolTip" xml:space="preserve">
    <value>Ein einfaches Metronom, dass über DirectPlay ausgegeben wird.
Das Metronom dient nur zur Hilfe, hat aber jedoch keinen
Einfluss auf die MIDI Aufnahmenen mit diesem Programm
jedoch wird es bei Externen Programmen die winmm.dll api
bwenutzen mitaufgenommen ujnd sollte in diesem Falle
ausgeschaltet werden. Auch bei dem Aufnahmemodur "nur
Töne" macht das Metronom nicht wirklich einen Sinn.</value>
  </data>
  <data name="ComboBox_Comport.ToolTip" xml:space="preserve">
    <value>Wähle den Comport aus aufdwem sich der Mikrokontroller befindet.
Sollte er hir nicht erscheinen: Prüfen Sie opb der Mikrokontroller wirklich
verbunden ist und dass alle Treiber installiert sind. Sollte alles stimmen
aber trozdem nich funktionieren, wenden sich bitte an nicho@bosshome.ch.
</value>
  </data>
  <data name="Connect_GroupBox.ToolTip" xml:space="preserve">
    <value>Unter den Com-Port Einstellungen können Sie das Programm mit Ihrem Mikrokontroller Verbinden.
Wählen Sie dazu in der Dropdown Liste den korrekten Port aus und clicken sie danach auf "Verbinden".
Sollte eine Fehlermeldung erscheinen, wählen sie einfach einen anderen Port und versuchen Sie es erneut.
Sollte keiner Der Ports gehen, vergewissern Sie sich, dass der Mikrokontroller korrekt mit dem Computer
verbunden ist und  bei einer Virtuellen Maschiene Com Ports unter den Einstellungen freigegeben sind.</value>
  </data>
  <data name="DirectPlay_ON.ToolTip" xml:space="preserve">
    <value>Durch diese Option werden die empfangenen MIDI Noten per
winmm.dll api ins Betriebssystem gesendet.
Dort kann der Stream von anderen Programmen abgefangen  werden.
Wird er von Keinem Programm abgefangen, wird er Live abgespielt.
Welche Programme kompatibel sind, kann ich leider nicht sagen.
Fals ihr favouritisiertes Musikprogramm nicht kompatibel sein
sollte gibt es immer nioch die Option per SendKey to Virtual MIDI
Piano oder das exportieren eines aufgenommenen MIDI Files.
Falls Sie welche finden, würde es mich freuen, wenn Sie mir Ihren
Fund per Mail an nico@bosshome.ch mitteilen würden, dammit
ich ihn anderen Benutzer meines Programmes mitteilen kann.

Die Latenzzeit bäträgt ca. 10ms. Der Aktuelle Wert kann unter
Messintervall auf Zehntelsmillisekunden genau abgelesen werden.</value>
  </data>
  <data name="SendKey_GroupBox.ToolTip" xml:space="preserve">
    <value>Durch diese Funktion ermöglicht es MIDI Sygnale per Tastaturbefehle einem Externen Programm wie z.B. Cubase (in Cubase mit Ctrl + K Virtuelle Tastatur aktivieren)  auf ein Virtuelles MIDI Piano zu senden. Diese Funktion ist viel einfache als die nicht von allen Programmen unterstüzte Funktion über die winmm.dll api jedoch Sind durch fehlende Tasten öft nicht alle 5 Oktaven benutzbar. Die Latenzzeit ist normalerweise bei beiden Varianten gleich  jedoch kann durch schlechte Virtuelle MIDI Pianos beim empfänger diese drastisch erhöt werden. Die Tastenzuordnung kann durch klicken auf die Buttons und drücken der gewünschten Taste, konfiguriert werden. Die zu konfigurioerende Oktave kann durch Okt. - und Okt. + vberändert werden.</value>
  </data>
  <data name="SendKeys_GroupBox.ToolTip" xml:space="preserve">
    <value>Durch diese Funktion ermöglicht es MIDI Sygnale per Tastaturbefehle einem Externen Programm wie z.B. Cubase (in Cubase mit Ctrl + K Virtuelle Tastatur aktivieren)  auf ein Virtuelles MIDI Piano zu senden.
Die Tastaturkonfiguration ist weiter links zu finden.
Soll Diese Funktion aktiviert werden?</value>
  </data>
  <data name="Volume_max_NumericUpDown.ToolTip" xml:space="preserve">
    <value>Maximum des Messpektrums:
Durch die folgende Werte kann eingeschränkt werden, in welchem Messbereich sich die Lautstärkenspektrum von 0-128 befinden.
Die werte 15-250 bedeuten z.B. dass Alle Messwerte von &gt;= 15 befinden Lautlos sind und alle von &lt;=250 den Maximalwert von 128 haben.
Der Messbereich reicht von 0 bis 255. Achtung: Durch Minimalspektrum &gt; Notenspezifischer Startwert können Lautlose Töne gesendet werden.</value>
  </data>
  <data name="Volume_min_NumericUpDown.ToolTip" xml:space="preserve">
    <value>Minimum des Messpektrums:
Durch die folgende Werte kann eingeschränkt werden, in welchem Messbereich sich die Lautstärkenspektrum von 0-128 befinden.
Die werte 15-250 bedeuten z.B. dass Alle Messwerte von &gt;= 15 befinden Lautlos sind und alle von &lt;=250 den Maximalwert von 128 haben.
Der Messbereich reicht von 0 bis 255. Achtung: Durch Minimalspektrum &gt; Notenspezifischer Startwert können Lautlose Töne gesendet werden.</value>
  </data>
  <data name="Volume_Steps_NumericUpDown.ToolTip" xml:space="preserve">
    <value>Anzahl an verschiedenemn Lautstärken.
Das maximum des MIDI Standarts beträgt 128.
1=gemessene Lautsterken werden ingnoriert und anstelle immer das Maximum 127 verwendet.
0=gemessene Lautsterken werden ingnoriert und anstelle immer 100 verwendet.
Jedoch kann durch runden z.B. auch auf 9 Lautstärken (ppp - pp - p - mp - m.v. - mf - f - ff - fff) gerundet werden.
In manchen fällen ist dies vorteilhaft, jedoch können die meisten Musikbearbeitungsprogramme dies auch noch nachträglich machen.
Formel: Volume=runde(127/Volume_steps*(Messwert-Volume_min)/(Volume_max-Volume_min))*Volume_steps</value>
  </data>
  <data name="MIDI_Save_Button.ToolTip" xml:space="preserve">
    <value>Beendet die Aufnahme, öffnet einen FileSave Dialog und speichert die .mid Datei an dem gewünschten Ort.
Diese Funktion kann auch über die Hintergrundssteueruing von einem andern Programm aus ausgeführt werden.
</value>
  </data>
  <data name="MIDI_Visualisierung_GroupBox.ToolTip" xml:space="preserve">
    <value>MIDI Visualisierung und Tonbasierende Induvidualeinstellungen:
Balken: Visualisiert die vom Mikrokontroller empfangene Sygnale. Infolge fon Leistungsoptimierung werden die Balken nur all 30ms aktuallisiert und haben infolgedessen eine höhere Latenzzeit als dei eigendlichen Töne.
Buttons: Spielt MIDI Töne per Mausklick und dient als Tonanzeige. Diese töne werden als Solche in das MIDI file geschrieben und gesendet, jedoch nicht von der Send to Virtual MIDI Pioano berücksichtigt.
Startwert: Bestimmt ab welchem Wert von 0-255 einen Ton als solcher gilt
Stopwert: Bestimmt ab welchem Wert von 0-255 einen Ton fertig ist (kleine Werte=weicher Ausklang).
Transpose: Induviduelle Halbtonverschiebung. Wird durch ändern der Kläppckhen automatisch angepasst. Wert darf sich zwar zwischen -127 und 127 befinden jedoch machen eigendlich nur werte von -10 bis 10 wirklich Sinn.
</value>
  </data>
  <data name="GroupBox3.ToolTip" xml:space="preserve">
    <value>Hier werden Anzahl Messungen und Verbindungsfehler ausgegeben.
Sollten hir über 100 Fehler pro aufnahme vorhanden sein prüfen
Sioe bitte alle stecker und melden Sie sich bei Nichtbehebung
per Mail an nico@bosshome.ch</value>
  </data>
  <metadata name="Com_Search_Timer.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>530, 23</value>
  </metadata>
  <metadata name="Serial_BackgroundWorker.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>1541, 29</value>
  </metadata>
  <metadata name="Messgeschwindigkeitsberechnung_Timer.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>1019, 28</value>
  </metadata>
  <metadata name="GetAsyncKeyState_Timer.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>1911, 29</value>
  </metadata>
  <metadata name="Display_Refresh_Timer.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>2262, 28</value>
  </metadata>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>83</value>
  </metadata>
</root>